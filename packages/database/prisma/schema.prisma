generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  refreshTokens RefreshToken[]
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  revoked   Boolean  @default(false)
  device    String?  
  ipAddress String?

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model Room {
  id              String        @id @default(uuid())
  roomName        String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime?      @updatedAt
  expiresAt       DateTime?
  status          RoomStatus    @default(PENDING)
  creatorId       String
  maxParticipants Int           @default(10)

  participants    Participant[]
}

model Participant {
  id          String           @id @default(uuid())
  roomId      String
  email       String
  isJoined    Boolean          @default(false)
  joinedAt    DateTime?
  leftAt      DateTime?
  role        ParticipantRole  @default(GUEST)

  room        Room             @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([roomId, email]) // ensures one entry per email per room
}

enum RoomStatus {
  PENDING
  ACTIVE
  INACTIVE
  DELETED
}

enum ParticipantRole {
  CREATOR
  GUEST
}

